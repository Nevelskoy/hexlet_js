
/*************************************************************
	Практическое занятие №5. Функции.
	Объявление, определение, вызов.
	Передача параметров. Возвращение значения.
	
*************************************************************/
#include <iostream>
#include <tchar.h>
#include <cstdlib>
#include <ctime>
//#include <cstdio>
//#include <cstdarg>
#include "other.h"

#define	  stop __asm nop


int _tmain()
{
	setlocale(LC_ALL, "");
#if 0
	/////////////////////////////////////////////////////////////////////////////
	// Задание 1. Ссылки.
	// 1.1. Объявите ссылку на тип double. Посредством ссылки измените значение

	double dbl = 5.0;
	double& adr = dbl;
	adr = 10.0;
	std::cout << "dbl = " << dbl << std::endl;
 
	// 1.2. Раскомментируйте  следующую строчку. 
	//Что следует сделать, чтобы linker не выдавал ошибки при создании exe-файла?
	// Подсказка: ref - это внешняя по отношению к данному файлу ссылка!
	//Подумайте, где надо объявить эту внешнюю ссылку, а где ее определить.
	
	ref++;
	std::cout << "ref = " << ref << std::endl;
	// 1.3. Раскомментируйте следующую строку. 
	//Что следует сделать, чтобы компилятор не выдавал ошибки 
	
	const int& ref1 = 1;


	// 1.4. Задан указатель:
	char c='A';
	char* pc = &c;

	//Объявите ссылку на указатель. Посредством ссылки измените
	char*& ref2 = pc;
	//а) значение по адресу
	*ref2 = 'B';
	//б) сам адрес
	ref2++;



	 // 1.5. Объявите и определите функцию, вычисляющую квадрат числа, переданного в качестве параметра.
	 //  параметр должен быть ссылкой (!). Вызовите функцию с заданными ниже аргументами
	//Замечание (!!!):
	// объявления функций принято помещать в заголовочный файл (.h),
	// а определения функций- в файл реализации (.cpp)
	// в задании заготовлены файлы other.cpp и other.h. 
	//Эти файлы можно использовать для размещения  Ваших функций.
	 {
		int x = 10;
		int res1 = square(x);
		int res2 = square(5);
		std::cout << "res2 = " << res2 << std::endl;
		stop
	}

#endif

////////////////////////////////////////////////////////////////////////////	
#if 0
	//Задание 2. Отличия при передаче параметров 
	//а) по значению, б) по ссылке, в) по указателю
	int val = 1; 	//значение этой переменной должно быть увеличено с помощью
				//каждой из функций на единицу 
	// 2.1. Объявите и определите три функции, которые увеличивают заданное
	//с помощью параметра значение на 1 
	// а) - IncByValue(),
	val = IncByValue(val);

	// б) - IncByPointer(), 
	int* pval = &val;
	IncByPointer(pval);

	//в) - IncByReference() . 
	int& rval = val;
	IncByReference(rval);

	//Проверьте правильность с помощью отладчика.
	//значение этой переменной должно быть увеличено с помощью
	//каждой из функций на единицу
	stop
#endif


	// 2.2 Передача параметров c помощью указателя и по ссылке.
	//Создайте функцию (функции) Swap(), которая меняет значения
	//переменных nX и nY местами.
	
	// а)Функция должна принимать два указателя на int  и оперируя этими указателями
	//   должна менять значения переменных в вызывающей (!) программе

	// б)Функция должна принимать две ссылки на int и оперируя этими ссылками
	//   должна менять значения переменных в вызывающей (!) программе
	//Проверьте правильность с помощью приведенного ниже фрагмента.
#if 0
			int	nX = 1;
			int nY = -1;
			int* rnX = &nX;
			int* rnY = &nY;
			Swap(rnX, rnY);  //поменяли местами значения nX и nY с помощью указателей на nX и nY
			Swap(&nX, &nY);  //а теперь обратно с помощью ссылок на nX и nY

			stop
#endif
		////////////////////////////////////////////////////////////////////////////
#if 0	
		//Задание 3. Массивы в качестве аргументов.
		// 3.1. Напишите функцию печати элементов во встроенном одномерном массиве

		//Например:
		const int N = 12;
		int ar[N] = { 5, 4, 7, 8, 1, 2, 6, 0, 10, 12, 77, 11 };
		int size_ar = sizeof(ar) / sizeof(int);
		printArray(ar, size_ar);
		
		const int Z = 7;
		int ar2[Z] = { 5, 4, 7, 8, 12, 77, 11 };
		int size_ar2 = sizeof(ar2) / sizeof(int);
		printArray(ar2, size_ar2);

		// 3.2. Напишите функцию поиска минимального элемента во встроенном одномерном массиве
		//Например:
		int ar3[] = { 8, 43, 5, 6, 23, 28, 12, 77, };
		int size_ar3 = sizeof(ar3) / sizeof(int);
		int res = Min(ar3, size_ar3);
		std::cout << "min el = " << res << std::endl;
	
		// 3.3. Напишите функцию сравнения двух строк - MyStrCmp():
		//Функция должна принимать два указателя на сравниваемые строки 
		//(возможно Вы должны указать компилятору, что функция не имеет права модифицировать 
		//содержимое строк)

		//Функция должна возвращать отрицательное значение, если
		//первая строка лексикографически меньше второй, 0 - если
		//они равны и положительное значение, если первая строка
		//больше второй.
		//Замечание: при лексикографическом способе сравниваются коды символов (!!!), а не длина строк
		// если код  символа первой строки > соответствующего кода символа второй строки, 
		// то первая строка > второй 
		//Вспомните, что признаком конца строки является нулевой байт.

		//Создайте две строки для сравнения:
		char str_1[] = "1235";
		char str_2[] = "123545";
		//Вызовите функцию сравнения
		int result_compare = Compare(str_1, str_2);
		//Выведите результат сравнения с помощью cout:
		std::cout << result_compare << std::endl;
		stop
#endif
////////////////////////////////////////////////////////////////////////////
	//Задание 4. Функции работы со строками

		// 4. Создайте и вызовите функцию, которая принимает в качестве параметра 
		//порядковый номер - nN - месяца, 
		//а возвращает  указатель на символьную строку, содержащую название заданного месяца. 
		//Подсказки: 
		//1) для того, чтобы данная функция работала корректно, 
		// очень важно – как объявлена строка, указатель на которую требуется вернуть.
		//2) Кроме того, было бы неплохо предусмотреть защиту при некорректном значении месяца.
		
		{
			const char* mStr = NameOfMonth(3);
//			std::cout << mStr << std::endl;
			stop
		}


////////////////////////////////////////////////////////////////////////////
	//Задание 5. Возвращение адреса.
	//Напишите функцию, которая находит адрес минимального элемента в массиве,
	// таким образом, чтобы ее вызов можно было использовать слева от знака 
	// равенства: *MyMin(параметры) = 0;
#if 0
		{
			int arr5[] = { 8, 1, 2, 6, -5, 10, 12, 77 };
			int size_ar5 = sizeof(arr5) / sizeof(int);
			*MyMin(arr5, size_ar5) = 0;
		}
	
#endif
////////////////////////////////////////////////////////////////////////////
	//Задание 6 (*).
	//Дан одномерный массив из N элементов
	//Известно: значения элементов могут быть только в диапазоне 0, 1, 2 …., 30, 31.  
	//Напишите две функции :
	//•первая - «выясняет» какие значения встречаются в массиве четное число раз, 
	//а какие – нечетное число раз. При этом, для результата можно использовать только один int, 
	//	в который следует "запаковать" результат вычисления ) = >
	//int   f1(параметры);
	// 
	//•вторая –  выводит результат(Например: 0 встречается в массиве четное число раз)

	//В задании привести объявление, определение и вызов функций.
#if 1
			const int N_size = 12;
			int ar6[N_size];
			srand(time(0));
			for (int i = 0; i < N_size; i++) {
				ar6[i] = rand() % 32;
			}

			printArray(ar6, N_size);
			std::cout << std::endl;

			int result = f1(ar6, N_size);
			std::cout << "Функция f2: " << std::endl;
			f2(result, ar6, N_size);
			std::cout << "Функция f3: " << std::endl;
			f3(ar6, N_size);
#endif


//*********************   Дополнительное задание   ****************************************************
//Задание 7 (*)  
// Выполните задания 5 и 6 по курсовой работе 
// описание заданий находится в файлах "Задание (игра Змейка)_5 (функции без параметров)_3" и 
// "Задание (игра Змейка)_6 (функции с параметрами)_3.docs"
// К этим заданиям имеются подсказки, находящиеся в соответствующих файлах 
// Каждое задание выполняется в отдельном проекте
// Рекомендация:
// Все проекты (project), связанные с курсовой работой имеет смысл помещать в одно решение (solution)
//*****************************************************************************************************


	return 0;
}//

