// Темы:
// Перегрузка операторов.

//#include "stdafx.h"	//если Вы используете предкомпиляцию заголовочных
					//файлов, раскомментируйте эту строчку
#include <tchar.h>
#include <iostream>
#include "Point.h"
#include "MyString.h"
#include "A.h"
#include "WD.h"

#define	  stop __asm nop

int _tmain(int argc, _TCHAR* argv[])
{
//////////////////////////////////////////////////////////////////////
	using namespace std;
#if 0
	//Задание 1
	//Создайте класс Point, который будет содержать координаты
	//"точки". Объявите конструктор (конструкторы) класса   

	//1a. "Перегрузите" оператор += так, чтобы при выполнении
	//операции типа pt2+=pt1; складывались
	//одноименные переменные объектов pt1 и pt2, а сумма
	//присваивалась соответствующим переменным объекта pt2 или
	// в случае  pt2+=1; обе переменные объекта pt2 увеличивались на
	// указанное значение
	// (!) Перегрузку выполните с помощью метода класса (оператор +=)
	//Проверьте корректность работы перегруженного оператора
	{

		Point pt5(1, 1);
		//Point& r = pt5 + Point(4, 5);
		Point pt1(1,1);
		Point pt2(2,2);
		//pt2+=pt1;
		//pt2.PrintPoint();
        //pt2+=1;
		//pt2.PrintPoint();
		Point pt3(3,3);
		//pt2+=pt1+=pt3;
		//pt2.PrintPoint();
		pt3 = pt1 + pt2 + pt3;
		pt3.PrintPoint();
		stop
	}
	//1b. "Перегрузите" оператор -= так, чтобы при выполнении
	//операции типа pt2-=pt1; вычитались
	//одноименные переменные объектов pt1 и pt2, а разность
	//присваивалась соответствующим переменным объекта pt2 или
	// в случае  pt2-=1; обе переменные объекта pt2 уменьшались на
	// указанное значение
	//(!) Перегрузку выполнитес помощью глобальной функции (оператор -=)
	//Проверьте корректность работы перегруженного оператора
	{
		Point pt1(1,1);
		Point pt2(2,2);
		//pt2-=pt1;
		//pt2.PrintPoint();
		//pt2-=1;
		//pt2.PrintPoint();
		Point pt3(3,3);
     	pt2-=pt1-=pt3;
		//pt2.PrintPoint();
		stop
	}
#endif

#if 0
 	//Задание 2
	//2a. Перегрузите оператор + 
	//с помощью методов класса, где это возможно 
	//так, чтобы любая из закомментированных строк
	//кода выполнялась корректно
	{
		Point pt1(1,1);
		Point pt2(2,2);
		Point pt3;
		
		pt3 = pt2 + 5;        // 5 - инициализируем анонимный объект (5,0)		
    	pt3 = 2 + pt1;		  // необходимо сначало создать анонимный объект
//		pt3.PrintPoint();
		pt3 = pt1 + pt2;
		
	stop
	}
	//2b. Перегрузите оператор -
	// с помощью  глобальных функций (оператор -)
	//так, чтобы любая из закомментированных строк
	//кода выполнялась корректно
	{
		Point pt1(1,1);
		Point pt2(2,2);
		Point pt3;

		pt3 = pt1 - 5;		
     	pt3 = 2 - pt1;      
//		pt3.PrintPoint();  
		pt3 = pt1 - pt2;
	
		stop
	}
	//Задание 3
	// Перегрузите унарный оператор +/- 
	{
		Point pt1(1,1);
		Point pt3;

		pt3 = -pt1;  // с помощью глобальной функции,
//		pt3.PrintPoint();
		pt3 = +pt1;  // с помощью метода класса
//		pt3.PrintPoint();

	}
	//Задание 4. Перегрузите оператор << (вывода в поток) для
	// класса Point  таким образом, чтобы при выводе отображались координаты точки
	{
		Point pt(10,20);
		std::cout << pt << std::endl;//например, так:x=10, y=20
		stop
	}
#endif

#if 0

	//Задание 5.Перегрузка оператора  =.

//Подключите к проекту файлы MyString.cpp и MyString.h
//класса MyString, разработанного Вами на предыдущем занятии
// Перегрузите оператор присваивания для класса MyString
//Проверьте корректность работы перегруженного оператора

	{

		MyString s1("AAA"), s2;
		s1=s2; // (s1=s2) erorr! nullptr s2!
		cout << s2.GetString() << endl;
		s1="CCC";
		cout << s1.GetString() << endl;
		s2= MyString("tmp");
		cout << s2.GetString() << endl;
		s2 = std::move(s2);
		stop
	}

#endif


#if 0

	//Задание 6. Перегрузите оператор << (вывода в поток) для
	//класса MyString таким образом, чтобы при выполнении приведенной строки
	//на экран было выведено:
	//contents:  "QWERTY"

	MyString s("QWERTY");
	cout<<s<<endl;
	stop

#endif

#if 0
	//Задание 7. Перегрузите операторы + и += для класса MyString таким образом,
  	//чтобы происходила конкатенация строк
	MyString s1("QWERTY"), s2("AAA"), s3, s4("BBB");
	s3 = s1+s2;
	cout << s3.GetString() << endl;
	s4 += s1; 
	cout << s4.GetString() << endl;
	stop

#endif

#if 0

	//Задание 8. Перегрузите операторы  постфиксный декремент -- и префиксный инкремент
	//для класса MyString таким образом, при применении декремента производился перевод в нижний регистр всех символов,
	// являющихся буквами латинского алфавита, а при применении инкремента производился перевод в верхний регистр.
	// при работе можно воспользоваться следующими функциями <ctype.h>:
	//int  isupper( int C);
	//int  islower( int C);
	//int  toupper( int C);
	//int  tolower( int C);
	{

		MyString str1("Hello World!!!");
		MyString str1_2 = str1--;
		cout << str1_2.GetString() << endl;
		cout << str1.GetString() << endl;

		MyString str2("Hello World!");
		MyString str2_2 = ++str2;
		cout << str2_2.GetString() << endl;

		stop
	}

#endif
	
#if 1
	//Задание 9. Перегр9узите операторы + и +=   для enum WEEKDAY
	{	
		enum WD wd1 = SATURDAY;
		wd1 = wd1 + 1;
		cout << wd1 << endl;
		WD wd2 = wd1 + 4;
		cout << wd2 << endl;
		wd2 += 2;
		cout << wd2 << endl;
	}
	stop
		
		
	//Задание 10. Перегрузите оператор << (вывода в поток) для
	//перечисления WD таким образом, чтобы при выводе отображалась строка,
	// соответствующая именованной константе:
	{
		enum WD wd = SATURDAY;
		std::cout << wd << std::endl;//например, так:saturday
		stop
	}



#endif	


#if 0
	
	const int size_ar = 10;
	A arr(size_ar);
	
	arr[2] = 5;
	arr[5] = 7;
	arr[1] = 8;

	//for (int i = 0; i < size_ar; i++) {
	//	cout << arr[i] << endl;
	//}

	const int rows = 3; 
	const int cols = 4;
	B b(rows, cols);

	b[1][1] = 5;



	for (int i = 0; i < rows; i++){
		for (int y = 0; y < cols; y++){
			cout << b[i][y] << endl;
		}
		cout << endl;
	}

#endif

	return 0;

}//endmain

